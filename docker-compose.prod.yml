version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rebel_budget}
      POSTGRES_USER: ${POSTGRES_USER:-rebel_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rebel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rebel_user} -d ${POSTGRES_DB:-rebel_budget}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Rebel Budget App (Frontend + Backend)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rebel_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-rebel_budget}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEBUG=False
      - ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rebel_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - rebel_network
    restart: unless-stopped

networks:
  rebel_network:
    driver: bridge

volumes:
  postgres_data: 